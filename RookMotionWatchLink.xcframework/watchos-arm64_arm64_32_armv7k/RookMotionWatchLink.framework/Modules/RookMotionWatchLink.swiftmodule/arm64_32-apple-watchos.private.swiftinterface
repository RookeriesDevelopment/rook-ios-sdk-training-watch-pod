// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64_32-apple-watchos6.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RookMotionWatchLink
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import CoreData
import Foundation
import HealthKit
import RealmSwift
@_exported import RookMotionWatchLink
import Swift
import UIKit
import WatchConnectivity
import WatchKit
import _Concurrency
import _StringProcessing
public struct RWTrainingSummariesTransfer : Swift.Codable {
  public let duration_time_tot: Swift.Int
  public let z1_time: Swift.Float
  public let z2_time: Swift.Float
  public let z3_time: Swift.Float
  public let z4_time: Swift.Float
  public let z5_time: Swift.Float
  public let hr_max: Swift.Int
  public let hr_min: Swift.Int
  public let hr_avg: Swift.Int
  public let effort_max: Swift.Int
  public let effort_min: Swift.Int
  public let effort_avg: Swift.Int
  public let calories: Swift.Int
  public let z1_calories_tot: Swift.Float
  public let z2_calories_tot: Swift.Float
  public let z3_calories_tot: Swift.Float
  public let z4_calories_tot: Swift.Float
  public let z5_calories_tot: Swift.Float
  public let steptsTotal: Swift.Int
  public let z1_steps_tot: Swift.Int
  public let z2_steps_tot: Swift.Int
  public let z3_steps_tot: Swift.Int
  public let z4_steps_tot: Swift.Int
  public let z5_steps_tot: Swift.Int
  public let cadence_max: Swift.Float
  public let cadence_min: Swift.Float
  public let cadence_avg: Swift.Float
  public let z1_cadence_tot: Swift.Int
  public let z2_cadence_tot: Swift.Int
  public let z3_cadence_tot: Swift.Int
  public let z4_cadence_tot: Swift.Int
  public let z5_cadence_tot: Swift.Int
  public init(duration_time_tot: Swift.Int, z1_time: Swift.Float, z2_time: Swift.Float, z3_time: Swift.Float, z4_time: Swift.Float, z5_time: Swift.Float, hr_max: Swift.Int, hr_min: Swift.Int, hr_avg: Swift.Int, effort_max: Swift.Int, effort_min: Swift.Int, effort_avg: Swift.Int, calories: Swift.Int, z1_calories_tot: Swift.Float, z2_calories_tot: Swift.Float, z3_calories_tot: Swift.Float, z4_calories_tot: Swift.Float, z5_calories_tot: Swift.Float, steptsTotal: Swift.Int, z1_steps_tot: Swift.Int, z2_steps_tot: Swift.Int, z3_steps_tot: Swift.Int, z4_steps_tot: Swift.Int, z5_steps_tot: Swift.Int, cadence_max: Swift.Float, cadence_min: Swift.Float, cadence_avg: Swift.Float, z1_cadence_tot: Swift.Int, z2_cadence_tot: Swift.Int, z3_cadence_tot: Swift.Int, z4_cadence_tot: Swift.Int, z5_cadence_tot: Swift.Int)
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum RoundingPrecision {
  case ones
  case tenths
  case hundredths
  case thousandths
  public static func == (a: RookMotionWatchLink.RoundingPrecision, b: RookMotionWatchLink.RoundingPrecision) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func preciseRound(_ value: Swift.Float, precision: RookMotionWatchLink.RoundingPrecision = .ones) -> Swift.Float
public func getWatchSensorName() -> Swift.String
public func getHours(from lastRecordTime: Swift.String?) -> Swift.Int
public func goToSync()
public struct WorkoutType {
  public let uuid: Swift.String
  public let name: Swift.String
  public let useSteps: Swift.Bool
  public let typeSteps: Swift.String?
  public init(uuid: Swift.String, name: Swift.String, useSteps: Swift.Bool, typeSteps: Swift.String?)
}
@objc @_inheritsConvenienceInitializers public class RWRemoteClass : RealmSwift.Object {
  @objc dynamic public var id: RealmSwift.ObjectId
  @objc dynamic public var classUUID: Swift.String
  @objc dynamic public var roomUUID: Swift.String
  @objc dynamic public var trainingName: Swift.String
  @objc dynamic public var classDelay: Swift.Int
  @objc dynamic public var useSteps: Swift.Int
  @objc dynamic public var stepOptions: Swift.String
  @objc override public static func primaryKey() -> Swift.String?
  convenience required public init(classUUID: Swift.String, roomUUID: Swift.String, trainingName: Swift.String, classDelay: Swift.Int, useSteps: Swift.Int, stepOptions: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension RookMotionWatchLink.RWStorageManager {
  public func storeTrainingtype(trainingType: RookMotionWatchLink.RWTrainingType) throws
  public func deleteAllTrainingTypes()
  public func readTrainingTypesList() -> [RookMotionWatchLink.RWTrainingType]
}
@objc public protocol RWCommunicationDelegate {
  @objc func session(_ session: WatchConnectivity.WCSession, messageData: [Swift.String : Any])
  @objc func session(_ session: WatchConnectivity.WCSession, userInfo: [Swift.String : Any])
  @objc optional func session(_ session: WatchConnectivity.WCSession, message: [Swift.String : Any])
  @objc optional func userInfoSaved(_ session: WatchConnectivity.WCSession, watchMessage: [Swift.String : Any])
}
@objc @_inheritsConvenienceInitializers public class RWCommunicationManager : ObjectiveC.NSObject {
  public static let shared: RookMotionWatchLink.RWCommunicationManager
  weak public var delegate: RookMotionWatchLink.RWCommunicationDelegate?
  @objc override dynamic public init()
  public func configureSession()
  public func sendInfo(_ info: [Swift.String : Any])
  public func sendPendingTraining(_ unfinishTraining: RookMotionWatchLink.RWTrainingInfo)
  @objc deinit
}
extension RookMotionWatchLink.RWCommunicationManager : WatchConnectivity.WCSessionDelegate {
  @objc dynamic public func session(_ session: WatchConnectivity.WCSession, activationDidCompleteWith activationState: WatchConnectivity.WCSessionActivationState, error: Swift.Error?)
  @objc dynamic public func session(_ session: WatchConnectivity.WCSession, didReceiveUserInfo userInfo: [Swift.String : Any] = [:])
  @objc dynamic public func session(_ session: WatchConnectivity.WCSession, didReceiveMessage message: [Swift.String : Any], replyHandler: @escaping ([Swift.String : Any]) -> Swift.Void)
}
public func generateMaxValueFor(value: Swift.Int, globalVar: Swift.Int) -> Swift.Int
public func generateMinValueFor(value: Swift.Int, globalVar: Swift.Int) -> Swift.Int
@objc @_inheritsConvenienceInitializers public class RMUser : RealmSwift.Object {
  @objc dynamic public var id: Swift.Int
  @objc dynamic public var userUUID: Swift.String?
  @objc dynamic public var userToken: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var lastName: Swift.String?
  @objc dynamic public var email: Swift.String?
  @objc dynamic public var pseudonym: Swift.String?
  @objc dynamic public var userEmail: Swift.String?
  @objc dynamic public var userImage: Swift.String?
  @objc dynamic public var physiologicalVariables: RookMotionWatchLink.RMUserPhysiologicalVariables?
  @objc override public static func primaryKey() -> Swift.String?
  public func updatePhysiologicalVariables(weight: Swift.Double, height: Swift.Double, restingHeartRate: Swift.Int)
  public func setUserUpdatePending(with updatePending: Swift.Bool)
  public func updateUserProperties(uuid: Swift.String?, name: Swift.String?, lastName: Swift.String?, email: Swift.String?, userToken: Swift.String?, pseudonym: Swift.String?, urlImage: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RMUserPhysiologicalVariables : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var weight: Swift.String?
  @objc dynamic public var height: Swift.String?
  @objc dynamic public var restingHeartRate: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct SensorPaginationResponse : Swift.Decodable {
  public let data: [RookMotionWatchLink.RMSensorAPI]
  public let meta: RookMotionWatchLink.MetaResponse
  public init(from decoder: Swift.Decoder) throws
}
public struct RMRegisteredCenter : Swift.Decodable {
  public let chain: RookMotionWatchLink.RMRegisteredChain
  public init(chain: RookMotionWatchLink.RMRegisteredChain)
  public init(from decoder: Swift.Decoder) throws
}
public struct RMRegisteredChain : Swift.Decodable {
  public let chainUUID: Swift.String
  public let chainName: Swift.String
  public let branch: RookMotionWatchLink.RMRegisteredBranch
  public init(chainUUID: Swift.String, chainName: Swift.String, branch: RookMotionWatchLink.RMRegisteredBranch)
  public init(from decoder: Swift.Decoder) throws
}
public struct RMRegisteredBranch : Swift.Decodable {
  public let branchUUID: Swift.String
  public let branchName: Swift.String
  public var status: Swift.String?
  public let userRooms: [RookMotionWatchLink.RMRegisteredRooms]
  public init(branchUUID: Swift.String, branchName: Swift.String, status: Swift.String, userRooms: [RookMotionWatchLink.RMRegisteredRooms])
  public init(from decoder: Swift.Decoder) throws
}
public struct RMRegisteredRooms : Swift.Decodable {
  public let id: Swift.Int
  public let roomUuid: Swift.String
  public let roomName: Swift.String
  public let description: Swift.String?
  public let typeRoom: Swift.String?
  public let trainingType: Swift.String?
  public let trainingTypeUUID: Swift.String?
  public let configurationUUID: Swift.String?
  public let channel: Swift.String?
  public let duration: Swift.Int?
  public let capacity: Swift.Int?
  public let classDelay: Swift.Int?
  public let dataOrder: Swift.String?
  public let stepOptions: Swift.String?
  public let useSteps: Swift.Int?
  public let remoteState: Swift.Int?
  public init(id: Swift.Int, roomUuid: Swift.String, roomName: Swift.String, description: Swift.String, typeRoom: Swift.String, trainingType: Swift.String?, trainingTypeUUID: Swift.String?, configurationUUID: Swift.String?, channel: Swift.String?, duration: Swift.Int?, capacity: Swift.Int?, classDelay: Swift.Int?, dataOrder: Swift.String?, stepOptions: Swift.String?, useSteps: Swift.Int?, remoteState: Swift.Int?)
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class RWTrainingInfo : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var start: Swift.String?
  @objc dynamic public var end: Swift.String?
  @objc dynamic public var trainingTypeUUID: Swift.String?
  @objc dynamic public var sensorUUID: Swift.String?
  @objc dynamic public var sensorName: Swift.String?
  @objc dynamic public var deviceType: Swift.String?
  @objc dynamic public var uploadedAt: Swift.String
  @objc dynamic public var groupalMode: Swift.Int
  @objc dynamic public var auxSummary: RookMotionWatchLink.RWAuxiliarSummary?
  @objc dynamic public var summary: RookMotionWatchLink.RWTrainingSummaries?
  @objc dynamic public var records: RookMotionWatchLink.RWTrainingStoragedRecords?
  @objc dynamic public var remoteClass: RookMotionWatchLink.RWRemoteClass?
  public var summaries: RealmSwift.List<RookMotionWatchLink.RWTrainingSummary>
  @objc dynamic public var offset: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case start, end, offset
    case sensorUUID
    case trainingTypeUUID
    case deviceType
    case groupalMode
    case records, summaries
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct RWRemoteClassTransfer : Swift.Codable {
  public let classUUID: Swift.String
  public let roomUUID: Swift.String
  public let trainingName: Swift.String
  public let classDelay: Swift.Int
  public let useSteps: Swift.Int
  public let stepOptions: Swift.String
  public init(classUUID: Swift.String, roomUUID: Swift.String, trainingName: Swift.String, classDelay: Swift.Int, useSteps: Swift.Int, stepOptions: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class RWStorageManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func saveStepRecord(object: RookMotionWatchLink.RWStepDataRecords)
  public func saveHeartRateRecord(object: RookMotionWatchLink.RWHeartRateDataRecords)
  public func saveTrainingInfoRecord(object: RookMotionWatchLink.RWTrainingInfo)
  public func saveTrainingSummary(object: RookMotionWatchLink.RWTrainingSummaries)
  public func getAllStepsRecords() -> [RookMotionWatchLink.RMStepDerivedRecord]
  public func getAllHeartRateRecords() -> [RookMotionWatchLink.RMHrDerivedRecord]
  public func getAllTrainingInfoRecords() -> [RookMotionWatchLink.RWTrainingInfo]
  public func getAllTrainingSummaries() -> [RookMotionWatchLink.RWTrainingSummaries]
  public func cleanDataBase()
  public func deleteAllStepsRecords()
  public func deleteAllHeartRateRecords()
  public func deleteAllTrainingInfoRecords()
  public func deleteAllTrainingSummaries()
  public func deleteSpecificStepRecord(object: RealmSwift.Results<RookMotionWatchLink.RWStepDataRecords>)
  public func deleteSpecificHeartRateRecord(object: RealmSwift.Results<RookMotionWatchLink.RWHeartRateDataRecords>)
  public func deleteSpecificTrainingRecord(object: RookMotionWatchLink.RWTrainingInfo)
  public func deleteSpecificTrainingInfoReference(object: RealmSwift.ThreadSafeReference<RookMotionWatchLink.RWTrainingInfo>)
  public func deleteSpecificTrainingSummary(object: RealmSwift.Results<RookMotionWatchLink.RWTrainingSummaries>)
  public func generateSummaries(summary: RookMotionWatchLink.RWTrainingSummaries, _ heartRateRecordsData: RookMotionWatchLink.RWHeartRateDataRecords?, _ stepsRecordsData: RookMotionWatchLink.RWStepDataRecords?, time: Swift.Int)
  public func storeHrSummaries(summary: RookMotionWatchLink.RWTrainingSummaries, record: RookMotionWatchLink.RWHeartRateDataRecords, time: Swift.Int)
  public func storeStepsSummaries(summary: RookMotionWatchLink.RWTrainingSummaries, record: RookMotionWatchLink.RWStepDataRecords, time: Swift.Int)
  public func storeZonesSummaries(summary: RookMotionWatchLink.RWTrainingSummaries, deltaTime: Swift.Float, _ delta_calories: Swift.Float, effort: Swift.Int, time: Swift.Int)
  public func storeStepsZonesSummaries(summary: RookMotionWatchLink.RWTrainingSummaries, delta_steps: Swift.Int, cadence: Swift.Float, cadenceElements: Swift.Int, effort: Swift.Int, time: Swift.Int)
  public func storeTrainingDuration(time: Swift.Int, summary: RookMotionWatchLink.RWTrainingSummaries)
  public func addRecordForTraining(hrRecord: RookMotionWatchLink.RWHeartRateDataRecords? = nil, stepRecord: RookMotionWatchLink.RWStepDataRecords? = nil, _ training: RookMotionWatchLink.RWTrainingInfo)
  public func updateTrainingInfo(_ stop: Swift.String = "", sensorUUID: Swift.String? = nil, trainingTypeUUID: Swift.String? = nil, _ training: RookMotionWatchLink.RWTrainingInfo)
  public func updateTrainingSummariesToSend(summaryElement: RookMotionWatchLink.RWTrainingSummary, _ training: RookMotionWatchLink.RWTrainingInfo)
  public func updateTrainingAuxSummaries(_ training: RookMotionWatchLink.RWTrainingInfo, auxSummary: RookMotionWatchLink.RMTrainingAuxiliarSummary)
  public func updateTrainingSensorProperties(name: Swift.String?, sensorUUID: Swift.String?, training: RookMotionWatchLink.RWTrainingInfo)
  public func updateTrainingUploadDate(for training: RookMotionWatchLink.RWTrainingInfo)
  public func updateTrainingInfo(classUUID: Swift.String, roomUUID: Swift.String, trainingName: Swift.String, classDelay: Swift.Int, useSteps: Swift.Int, stepOptions: Swift.String, _ training: RookMotionWatchLink.RWTrainingInfo)
  public func storeSensor(sensor: RookMotionWatchLink.RMSensorAPI) throws
  public func readSensorsList() -> [RookMotionWatchLink.RMSensorAPI]
  public func getSensorUUID(sensorName: Swift.String) -> Swift.String
  public func getSensorsWithoutUUID() -> [RookMotionWatchLink.RMSensorAPI]
  public func getPendingTrainings() -> [RookMotionWatchLink.RWTrainingInfo]
  public func getUnfinishedTrainings() -> [RookMotionWatchLink.RWTrainingInfo]
  @objc deinit
}
public struct StepData {
  public let timeStamp: Foundation.Date
  public let stepCount: Swift.Int
}
extension RookMotionWatchLink.WorkoutManager {
  public func startTraining()
  public func pauseTraining()
  public func finishTraining(_ end: Swift.String? = nil)
  public func cancelTraining()
  public func setSummariesData()
}
public struct AddUserToRoomResponse : Swift.Decodable {
  public let result: Swift.String
  public let remainingWaitingSeconds: Swift.Int
  public let remainingPlaces: Swift.Int
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case result
    case remainingWaitingSeconds
    case remainingPlaces
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct HeartRate {
  public let timeStamp: Foundation.Date
  public let bpm: Swift.Double
  public let stepCount: Swift.Int
  public let energy: Swift.Double
  public init(timeStamp: Foundation.Date, bpm: Swift.Double, stepCount: Swift.Int, energy: Swift.Double)
}
@_hasMissingDesignatedInitializers public class RMSettings {
  public static let shared: RookMotionWatchLink.RMSettings
  public func getclientKey() -> Swift.String
  public func getToken() -> Swift.String
  public func setCredentials(client_key: Swift.String, token: Swift.String)
  public func setUrlApi(with url: Swift.String)
  public func getURLApi() -> Swift.String
  public func setUrlRemote(with url: Swift.String)
  public func getURLRemote() -> Swift.String
  public func initRookMotionSDK()
  @objc deinit
}
public struct RMSummariesID {
  public let duration_time_tot: Swift.Int
  public let z1_time_tot: Swift.Int
  public let z2_time_tot: Swift.Int
  public let z3_time_tot: Swift.Int
  public let z4_time_tot: Swift.Int
  public let z5_time_tot: Swift.Int
  public let heart_rate_min: Swift.Int
  public let heart_rate_avg: Swift.Int
  public let heart_rate_max: Swift.Int
  public let effort_min: Swift.Int
  public let effort_avg: Swift.Int
  public let effort_max: Swift.Int
  public let calories_tot: Swift.Int
  public let z1_calories_tot: Swift.Int
  public let z2_calories_tot: Swift.Int
  public let z3_calories_tot: Swift.Int
  public let z4_calories_tot: Swift.Int
  public let z5_calories_tot: Swift.Int
  public let steps_tot: Swift.Int
  public let z1_steps_tot: Swift.Int
  public let z2_steps_tot: Swift.Int
  public let z3_steps_tot: Swift.Int
  public let z4_steps_tot: Swift.Int
  public let z5_steps_tot: Swift.Int
  public let cadence_min: Swift.Int
  public let cadence_avg: Swift.Int
  public let cadence_max: Swift.Int
  public let z1_cadence_avg: Swift.Int
  public let z2_cadence_avg: Swift.Int
  public let z3_cadence_avg: Swift.Int
  public let z4_cadence_avg: Swift.Int
  public let z5_cadence_avg: Swift.Int
  public init()
}
@objc @_inheritsConvenienceInitializers public class BackGroundTasks : ObjectiveC.NSObject {
  public static let shared: RookMotionWatchLink.BackGroundTasks
  public func uploadPendingTraining(delete: Swift.Bool = true, completion: @escaping (RookMotionWatchLink.RMResponse) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public struct RWTrainingStoragedRecordsTransfer : Swift.Codable {
  public init(hrRecords: [RookMotionWatchLink.RWHeartRateDataRecordsTrasnfer], stepRecords: [RookMotionWatchLink.RWStepDataRecordsTransfer])
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RWHeartRateDataRecordsTrasnfer : Swift.Codable {
  public let timestamp: Swift.String
  public let heartRate: Swift.Int
  public let calories: Swift.Float
  public let effort: Swift.Float
  public let start: Swift.String
  public let heart_rate_variability: Swift.Float
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RWStepDataRecordsTransfer : Swift.Codable {
  public let timestamp: Swift.String
  public let cadence: Swift.Float
  public let steps: Swift.Int
  public let start: Swift.String
  public init(timestamp: Swift.String, cadence: Swift.Float, steps: Swift.Int, start: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class RWAuxiliarSummary : RealmSwift.Object {
  @objc dynamic public var id: RealmSwift.ObjectId
  @objc dynamic public var hrElements: Swift.Int
  @objc dynamic public var hrAccumulated: Swift.Int
  @objc dynamic public var effortElements: Swift.Int
  @objc dynamic public var effortAccumulated: Swift.Int
  @objc dynamic public var cadenceElements: Swift.Int
  @objc dynamic public var cadenceAccumulated: Swift.Int
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public enum RWRealTimeApi {
  case retriveRemoteRooms(userUUID: Swift.String, tokenUser: Swift.String? = nil, page: Swift.Int = 1)
  case connectUserToClass(classUUID: Swift.String, userUUID: Swift.String, tokenUser: Swift.String? = nil)
  case sendData(classUUID: Swift.String, realTimeData: RookMotionWatchLink.RealTimeData, tokenUser: Swift.String? = nil)
  case disconnectUserFromClass(classUUID: Swift.String, userUUID: Swift.String, tokenUser: Swift.String? = nil)
}
extension RookMotionWatchLink.RWRealTimeApi : RookMotionWatchLink.EndPointType {
  public var baseUrl: Foundation.URL? {
    get
  }
  public var path: Swift.String {
    get
  }
  public var httpMethod: RookMotionWatchLink.HTTPMethod {
    get
  }
  public var task: RookMotionWatchLink.HTTPTask {
    get
  }
  public var headers: RookMotionWatchLink.HTTPHeaders? {
    get
  }
}
public struct RWTrainingTransfer : Swift.Codable {
  public let start: Swift.String
  public let end: Swift.String
  public let trainingTypeUUID: Swift.String
  public let sensorUUID: Swift.String?
  public let sensorName: Swift.String
  public let deviceType: Swift.String
  public let uploadedAt: Swift.String
  public let groupalMode: Swift.Int
  public let offset: Swift.String
  public let auxSummary: RookMotionWatchLink.RWAuxSummaryTransfer
  public let summary: RookMotionWatchLink.RWTrainingSummariesTransfer
  public let records: RookMotionWatchLink.RWTrainingStoragedRecordsTransfer
  public let remoteClass: RookMotionWatchLink.RWRemoteClassTransfer?
  public init(start: Swift.String, end: Swift.String, trainingTypeUUID: Swift.String, sensorUUID: Swift.String?, sensorName: Swift.String, deviceType: Swift.String, uploadedAt: Swift.String, groupalMode: Swift.Int, offset: Swift.String, auxSummary: RookMotionWatchLink.RWAuxSummaryTransfer, summary: RookMotionWatchLink.RWTrainingSummariesTransfer, records: RookMotionWatchLink.RWTrainingStoragedRecordsTransfer, remoteClass: RookMotionWatchLink.RWRemoteClassTransfer?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RMResponse {
  public var code: Swift.String
  public var message: Swift.String
  public var success: Swift.Bool
}
public protocol EndPointType {
  var baseUrl: Foundation.URL? { get }
  var path: Swift.String { get }
  var httpMethod: RookMotionWatchLink.HTTPMethod { get }
  var task: RookMotionWatchLink.HTTPTask { get }
  var headers: RookMotionWatchLink.HTTPHeaders? { get }
}
public struct URLParameterEncoder : RookMotionWatchLink.ParameterEncoder {
  public static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookMotionWatchLink.Parameters) throws
}
@_hasMissingDesignatedInitializers public class RMStepDerivedRecord : RookMotionWatchLink.Convertable {
  public var timestamp: Swift.String?
  public var cadence: Swift.Float?
  public var steps: Swift.Int?
  convenience public init(timestamp: Swift.String? = nil, cadence: Swift.Float? = nil, steps: Swift.Int? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension RookMotionWatchLink.RMStepDerivedRecord : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct TrainingType : Swift.Decodable {
  public let trainingTypeUUID: Swift.String
  public let trainigName: Swift.String
  public let useHeartRate: Swift.Int?
  public let useSteps: RookMotionWatchLink.UseStepsResponse?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case trainingTypeUUID
    case trainigName
    case useHeartRate
    case useSteps
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct UseStepsResponse : Swift.Decodable {
  public let enabled: Swift.Int
  public let stepsTypes: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case enabled
    case stepsTypes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct RealTimeData : Swift.Codable {
  public let userUUID: Swift.String
  public let pseudonym: Swift.String
  public let email: Swift.String
  public let imageUser: Swift.String?
  public let stepsTot: Swift.Int
  public let caloriesTot: Swift.Int
  public let hr: Swift.Int
  public let effort: Swift.Int
  public let answerWithClusters: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class RWTrainingType : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var trainingTypeUUID: Swift.String?
  @objc dynamic public var trainigName: Swift.String?
  @objc dynamic public var useHeartRate: RookMotionWatchLink.OptionalInt?
  @objc dynamic public var useCycling: RookMotionWatchLink.OptionalInt?
  @objc dynamic public var useGps: RookMotionWatchLink.OptionalInt?
  @objc dynamic public var useSteps: RookMotionWatchLink.UseSteps?
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class UseSteps : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var enabled: RookMotionWatchLink.OptionalInt?
  @objc dynamic public var stepsTypes: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class AuthorizationManager : ObjectiveC.NSObject {
  final public let healthStore: HealthKit.HKHealthStore
  @objc override dynamic public init()
  public func requestAuthorization(completionHandler: @escaping ((_ success: Swift.Bool) -> Swift.Void))
  @objc deinit
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoder {
  static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookMotionWatchLink.Parameters) throws
}
public enum NetworkError : Swift.String, Swift.Error {
  case parametersNil
  case encodingFailed
  case missingUrl
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RWTrainingTypeAPI {
  case getTrainingtypes(tokenUser: Swift.String? = nil, page: Swift.Int = 1)
}
extension RookMotionWatchLink.RWTrainingTypeAPI : RookMotionWatchLink.EndPointType {
  public var baseUrl: Foundation.URL? {
    get
  }
  public var path: Swift.String {
    get
  }
  public var httpMethod: RookMotionWatchLink.HTTPMethod {
    get
  }
  public var task: RookMotionWatchLink.HTTPTask {
    get
  }
  public var headers: RookMotionWatchLink.HTTPHeaders? {
    get
  }
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPTask {
  case request
  case requestParameters(bodyParameters: RookMotionWatchLink.Parameters?, urlParameters: RookMotionWatchLink.Parameters?)
  case requestParametersAndHeaders(bodyParameters: RookMotionWatchLink.Parameters?, urlParameters: RookMotionWatchLink.Parameters?, additionalHeaders: RookMotionWatchLink.HTTPHeaders?)
}
public struct RMTrainingAuxiliarSummary {
  public var hrElements: Swift.Int
  public var hrAccumulated: Swift.Int
  public var effortElements: Swift.Int
  public var effortAccumulated: Swift.Int
  public var cadenceElements: Swift.Int
  public var cadenceAccumulated: Swift.Int
  public init()
}
public enum NetworkResponse : Swift.String {
  case succes
  case authenticationError
  case badRequest
  case outdated
  case failed
  case noData
  case unableToDecode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NetworkManager<T> where T : RookMotionWatchLink.EndPointType {
  public init()
}
extension RookMotionWatchLink.NetworkManager where T == RookMotionWatchLink.RWTrainingTypeAPI {
  public func getTrainingTypes(userToken: Swift.String? = nil, completion: @escaping ([RookMotionWatchLink.RWTrainingType]?, _ error: Swift.String?) -> Swift.Void)
}
extension RookMotionWatchLink.NetworkManager where T == RookMotionWatchLink.RWSensorAPI {
  public func addSesnorToUser(tokenUser: Swift.String? = nil, sensor_name: Swift.String, sensor_mac: Swift.String, ownership_type: Swift.String, userUUID: Swift.String, completion: @escaping (Swift.Int, Swift.String?, _ error: Swift.String?) -> Swift.Void)
  public func getUserSensor(userUUID: Swift.String, userToken: Swift.String? = nil, completion: @escaping ([RookMotionWatchLink.RMSensorAPI]?, _ error: Swift.String?) -> Swift.Void)
}
extension RookMotionWatchLink.NetworkManager where T == RookMotionWatchLink.RWTrainingAPI {
  public func addPendingTrainingToUser(userUUID: Swift.String, userToken: Swift.String? = nil, training: RookMotionWatchLink.RWTrainingInfo, completion: @escaping (Swift.Int, Swift.String?, _ error: Swift.String?) -> Swift.Void)
}
extension RookMotionWatchLink.NetworkManager where T == RookMotionWatchLink.RWRealTimeApi {
  public func getRemoteRooms(userUUID: Swift.String, tokenUser: Swift.String? = nil, completion: @escaping ([RookMotionWatchLink.RMRegisteredCenter]?, _ error: Swift.String?) -> Swift.Void)
  public func connectUserToClass(userUUID: Swift.String, classUUID: Swift.String, userToken: Swift.String? = nil, completion: @escaping (_ httpCode: Swift.Int, _ response: RookMotionWatchLink.AddUserToRoomResponse?, _ error: Swift.String?) -> Swift.Void)
  public func sendRealTimeData(to classUUID: Swift.String, realTimeData: RookMotionWatchLink.RealTimeData, userToken: Swift.String? = nil, completion: @escaping (_ httpCode: Swift.Int, _ response: Swift.String?, _ error: Swift.String?) -> Swift.Void)
  public func disconnectUserFromClass(with classUUID: Swift.String, userUUID: Swift.String, userToken: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers public class RWTrainingStoragedRecords : RealmSwift.Object, Swift.Codable {
  public var hrDerivedRecords: RealmSwift.List<RookMotionWatchLink.RWHeartRateDataRecords>
  public var stepsDerivedRecords: RealmSwift.List<RookMotionWatchLink.RWStepDataRecords>
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case hrDerivedRecords
    case stepsDerivedRecords
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct PaginationTrainingResponse : Swift.Decodable {
  public let data: [RookMotionWatchLink.RWTrainingType]
  public let meta: RookMotionWatchLink.MetaResponse
  public init(from decoder: Swift.Decoder) throws
}
public struct MetaResponse : Swift.Decodable {
  public let lastPage: Swift.Int
  public let currentPage: Swift.Int
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case lastPage
    case currentPage
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct PaginationResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let data: [T]
  public let meta: RookMotionWatchLink.MetaResponse
  public init(from decoder: Swift.Decoder) throws
}
public struct RWAuxSummaryTransfer : Swift.Codable {
  public let hrElements: Swift.Int
  public let hrAccumulated: Swift.Int
  public let effortElements: Swift.Int
  public let effortAccumulated: Swift.Int
  public let cadenceElements: Swift.Int
  public let cadenceAccumulated: Swift.Int
  public init(hrElements: Swift.Int, hrAccumulated: Swift.Int, effortElements: Swift.Int, effortAccumulated: Swift.Int, cadenceElements: Swift.Int, cadenceAccumulated: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum RWSensorAPI {
  case addSensorToUser(tokenUser: Swift.String? = nil, sensor_name: Swift.String, sensor_mac: Swift.String, ownership_type: Swift.String, userUUID: Swift.String)
  case getUserSensors(userUUID: Swift.String, userToken: Swift.String? = nil, page: Swift.Int = 1)
}
extension RookMotionWatchLink.RWSensorAPI : RookMotionWatchLink.EndPointType {
  public var baseUrl: Foundation.URL? {
    get
  }
  public var path: Swift.String {
    get
  }
  public var httpMethod: RookMotionWatchLink.HTTPMethod {
    get
  }
  public var task: RookMotionWatchLink.HTTPTask {
    get
  }
  public var headers: RookMotionWatchLink.HTTPHeaders? {
    get
  }
}
@_inheritsConvenienceInitializers public class RealmOptionalCodable<Value> : RealmSwift.Object, Swift.Decodable where Value : RealmSwift.RealmOptionalType, Value : Swift.Decodable {
  public var numeric: RealmSwift.RealmOptional<Value>
  public var value: Value? {
    get
    set
  }
  required convenience public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OptionalInt : RealmSwift.Object, Swift.Codable {
  public var numeric: RealmSwift.RealmOptional<Swift.Int>
  required convenience public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum RWTrainingAPI {
  case addPendingTrainingToUser(userUUID: Swift.String, userToken: Swift.String? = nil, training: RookMotionWatchLink.RWTrainingInfo)
}
extension RookMotionWatchLink.RWTrainingAPI : RookMotionWatchLink.EndPointType {
  public var baseUrl: Foundation.URL? {
    get
  }
  public var path: Swift.String {
    get
  }
  public var httpMethod: RookMotionWatchLink.HTTPMethod {
    get
  }
  public var task: RookMotionWatchLink.HTTPTask {
    get
  }
  public var headers: RookMotionWatchLink.HTTPHeaders? {
    get
  }
}
public struct JSONCodingKeys : Swift.CodingKey {
  public var stringValue: Swift.String
  public init(stringValue: Swift.String)
  public var intValue: Swift.Int?
  public init?(intValue: Swift.Int)
}
public struct JSON {
}
@objc @_inheritsConvenienceInitializers public class RWStepDataRecords : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var timestamp: Swift.String
  @objc dynamic public var cadence: Swift.Float
  @objc dynamic public var steps: Swift.Int
  @objc dynamic public var start: Swift.String
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension RookMotionWatchLink.RWStepDataRecords {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public enum WorkoutState {
  case started
  case stopped
  case paused
  public static func == (a: RookMotionWatchLink.WorkoutState, b: RookMotionWatchLink.WorkoutState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension RookMotionWatchLink.WorkoutState {
  public func actionText() -> Swift.String
}
public protocol WorkoutManagerDelegate : AnyObject {
  func workoutManager(_ manager: RookMotionWatchLink.WorkoutManager, didChangeStateTo newState: RookMotionWatchLink.WorkoutState)
  func workoutManager(_ manager: RookMotionWatchLink.WorkoutManager, didChangeHeartRateTo hearRateData: RookMotionWatchLink.RMHrDerivedRecord)
  func workoutManager(_ manager: RookMotionWatchLink.WorkoutManager, didChangeStepCount stepData: RookMotionWatchLink.RMStepDerivedRecord)
  func didFinishWorkOut(_ manager: RookMotionWatchLink.WorkoutManager)
}
public let kWorkoutHearRateData: Swift.String
public let kWorkoutStepData: Swift.String
public let kWorkoutDuration: Swift.String
public let kWorkoutFinish: Swift.String
public let kRemoteBadConnection: Swift.String
public let kRemoteDataSended: Swift.String
public let kTrainingPlayNotification: Swift.String
@objc @_inheritsConvenienceInitializers public class WorkoutManager : ObjectiveC.NSObject {
  weak public var delegate: RookMotionWatchLink.WorkoutManagerDelegate?
  public var state: RookMotionWatchLink.WorkoutState
  public var training: RookMotionWatchLink.RWTrainingInfo
  public var remoteClass: RookMotionWatchLink.RWRemoteClass?
  open var duration: Swift.Float
  @objc override dynamic public init()
  public func start(configuration: RookMotionWatchLink.WorkoutConfiguration?)
  public func pauseWorkout()
  public func resumenWorkOut()
  public func stop()
  public func resumenLater()
  public func onHeartRateReceived(bpm: Swift.Int)
  public func onStepsReceived(steps: Swift.Int, cadence: Swift.Float, deltaSteps: Swift.Int)
  public func configureRemote(with remoteClass: RookMotionWatchLink.RemoteClass)
  public func restoreWorkout(with pendingTraining: RookMotionWatchLink.RWTrainingInfo)
  @objc deinit
}
extension RookMotionWatchLink.WorkoutManager : HealthKit.HKWorkoutSessionDelegate {
  @objc dynamic public func workoutSession(_ workoutSession: HealthKit.HKWorkoutSession, didChangeTo toState: HealthKit.HKWorkoutSessionState, from fromState: HealthKit.HKWorkoutSessionState, date: Foundation.Date)
  @objc dynamic public func workoutSession(_ workoutSession: HealthKit.HKWorkoutSession, didFailWithError error: Swift.Error)
  @objc dynamic public func workoutSession(_ workoutSession: HealthKit.HKWorkoutSession, didGenerate event: HealthKit.HKWorkoutEvent)
}
extension RookMotionWatchLink.WorkoutManager : HealthKit.HKLiveWorkoutBuilderDelegate {
  @objc dynamic public func workoutBuilder(_ workoutBuilder: HealthKit.HKLiveWorkoutBuilder, didCollectDataOf collectedTypes: Swift.Set<HealthKit.HKSampleType>)
  @objc dynamic public func workoutBuilderDidCollectEvent(_ workoutBuilder: HealthKit.HKLiveWorkoutBuilder)
}
public enum TypeMessage : Swift.String {
  case syncUser
  case refreshToken
  case logout
  case training
  case unfinishTraining
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct WatchMessage : RookMotionWatchLink.Convertable {
  public let type: Swift.String
  public let data: [Swift.String : Any]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type, data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(type: RookMotionWatchLink.TypeMessage, data: [Swift.String : Any])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Convertable : Swift.Decodable, Swift.Encodable {
}
extension RookMotionWatchLink.Convertable {
  public func convertToDict() -> [Swift.String : Any]
}
@objc @_inheritsConvenienceInitializers public class RWHeartRateDataRecords : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var timestamp: Swift.String
  @objc dynamic public var heartRate: Swift.Int
  @objc dynamic public var calories: Swift.Float
  @objc dynamic public var effort: Swift.Float
  @objc dynamic public var start: Swift.String
  @objc dynamic public var heart_rate_variability: Swift.Float
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case timestamp
    case heartRate
    case heart_rate_variability
    case effort, calories
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
extension RookMotionWatchLink.RWHeartRateDataRecords {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class RWTrainingSummaries : RealmSwift.Object {
  @objc dynamic public var id: RealmSwift.ObjectId
  @objc dynamic public var duration_time_tot: Swift.Int
  @objc dynamic public var z1_time: Swift.Float
  @objc dynamic public var z2_time: Swift.Float
  @objc dynamic public var z3_time: Swift.Float
  @objc dynamic public var z4_time: Swift.Float
  @objc dynamic public var z5_time: Swift.Float
  @objc dynamic public var hr_max: Swift.Int
  @objc dynamic public var hr_min: Swift.Int
  @objc dynamic public var hr_avg: Swift.Int
  @objc dynamic public var effort_max: Swift.Int
  @objc dynamic public var effort_min: Swift.Int
  @objc dynamic public var effort_avg: Swift.Int
  @objc dynamic public var calories: Swift.Int
  @objc dynamic public var z1_calories_tot: Swift.Float
  @objc dynamic public var z2_calories_tot: Swift.Float
  @objc dynamic public var z3_calories_tot: Swift.Float
  @objc dynamic public var z4_calories_tot: Swift.Float
  @objc dynamic public var z5_calories_tot: Swift.Float
  @objc dynamic public var steptsTotal: Swift.Int
  @objc dynamic public var z1_steps_tot: Swift.Int
  @objc dynamic public var z2_steps_tot: Swift.Int
  @objc dynamic public var z3_steps_tot: Swift.Int
  @objc dynamic public var z4_steps_tot: Swift.Int
  @objc dynamic public var z5_steps_tot: Swift.Int
  @objc dynamic public var cadence_max: Swift.Float
  @objc dynamic public var cadence_min: Swift.Float
  @objc dynamic public var cadence_avg: Swift.Float
  @objc dynamic public var z1_cadence_tot: Swift.Int
  @objc dynamic public var z2_cadence_tot: Swift.Int
  @objc dynamic public var z3_cadence_tot: Swift.Int
  @objc dynamic public var z4_cadence_tot: Swift.Int
  @objc dynamic public var z5_cadence_tot: Swift.Int
  @objc override public static func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension RookMotionWatchLink.RWTrainingSummaries {
  public var countElements: Swift.Int {
    get
  }
  public var toDictionary: [Swift.String : Swift.String] {
    get
  }
}
public struct RWSummariesID {
  public let duration_time_tot: Swift.Int
  public let z1_time_tot: Swift.Int
  public let z2_time_tot: Swift.Int
  public let z3_time_tot: Swift.Int
  public let z4_time_tot: Swift.Int
  public let z5_time_tot: Swift.Int
  public let heart_rate_min: Swift.Int
  public let heart_rate_avg: Swift.Int
  public let heart_rate_max: Swift.Int
  public let effort_min: Swift.Int
  public let effort_avg: Swift.Int
  public let effort_max: Swift.Int
  public let calories_tot: Swift.Int
  public let z1_calories_tot: Swift.Int
  public let z2_calories_tot: Swift.Int
  public let z3_calories_tot: Swift.Int
  public let z4_calories_tot: Swift.Int
  public let z5_calories_tot: Swift.Int
  public let steps_tot: Swift.Int
  public let z1_steps_tot: Swift.Int
  public let z2_steps_tot: Swift.Int
  public let z3_steps_tot: Swift.Int
  public let z4_steps_tot: Swift.Int
  public let z5_steps_tot: Swift.Int
  public let cadence_min: Swift.Int
  public let cadence_avg: Swift.Int
  public let cadence_max: Swift.Int
  public let z1_cadence_avg: Swift.Int
  public let z2_cadence_avg: Swift.Int
  public let z3_cadence_avg: Swift.Int
  public let z4_cadence_avg: Swift.Int
  public let z5_cadence_avg: Swift.Int
  public init()
}
@objc @_inheritsConvenienceInitializers public class RepositoryTrainingTypes : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func getTrainingTypes(completion: @escaping ([RookMotionWatchLink.WorkoutType]) -> Swift.Void)
  public func getRemoteClasses(completion: @escaping ([RookMotionWatchLink.RemoteClass]) -> Swift.Void)
  @objc deinit
}
public struct JSONParameterEncoder : RookMotionWatchLink.ParameterEncoder {
  public static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookMotionWatchLink.Parameters) throws
}
public struct RMHrDerivedRecord : RookMotionWatchLink.Convertable {
  public var timeStamp: Swift.String?
  public var heartRate: Swift.Int?
  public var calories: Swift.Float?
  public var effort: Swift.Float?
  public var heartRateVariability: Swift.Int?
  public init(timeStamp: Swift.String?, heartRate: Swift.Int?, calories: Swift.Float?, effort: Swift.Float?, heartRateVariability: Swift.Int? = 0)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RWUserAPI {
  case getUserIndexes(userUUID: Swift.String, tokenUser: Swift.String? = nil)
  case checkTokenClient
}
extension RookMotionWatchLink.RWUserAPI : RookMotionWatchLink.EndPointType {
  public var baseUrl: Foundation.URL? {
    get
  }
  public var path: Swift.String {
    get
  }
  public var httpMethod: RookMotionWatchLink.HTTPMethod {
    get
  }
  public var task: RookMotionWatchLink.HTTPTask {
    get
  }
  public var headers: RookMotionWatchLink.HTTPHeaders? {
    get
  }
}
public struct WorkoutConfiguration {
  public let trainingTypeUUID: Swift.String
  public let useSteps: Swift.Bool
  public init(trainingTypeUUID: Swift.String, useSteps: Swift.Bool)
  public var getTypeTraining: HealthKit.HKWorkoutActivityType {
    get
  }
  public var locationType: HealthKit.HKWorkoutSessionLocationType {
    get
  }
}
public typealias NetworkRouterCompletion = (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> ()
public class CalculateDeltaTime {
  public init()
  public func setNewTimeStampReference()
  public func setTimeStampWithRecovery()
  public func calculate_dt() -> Swift.Float
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RMSensorAPI : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var sensorName: Swift.String?
  @objc dynamic public var sensorUUID: Swift.String?
  @objc dynamic public var sensorMAC: Swift.String?
  @objc dynamic public var updatedAt: Swift.String?
  @objc dynamic public var ownershipType: Swift.String?
  @objc override public static func primaryKey() -> Swift.String?
  public func createSensorFromPeripheral(_ sensor: CoreBluetooth.CBPeripheral) -> RookMotionWatchLink.RMSensorAPI
  public func createSensorFromWatch(uuid: Swift.String) -> RookMotionWatchLink.RMSensorAPI
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class RWTrainingSummary : RealmSwift.Object, Swift.Codable {
  @objc dynamic public var summaryTypeID: Swift.Int
  @objc dynamic public var value: Swift.Int
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct RemoteClass {
  public let id: Swift.Int
  public let uuid: Swift.String
  public let name: Swift.String
  public let trainingType: Swift.String
  public let trainingTypeUUID: Swift.String
  public let configurationUUID: Swift.String
  public let channel: Swift.String
  public let duration: Swift.Int
  public let capacity: Swift.Int
  public let classDelay: Swift.Int
  public let dataOrder: Swift.String
  public let useSteps: Swift.Int
  public let typeSteps: Swift.String?
  public var waitingTimeRemaining: Swift.Int
  public init(id: Swift.Int, uuid: Swift.String, name: Swift.String, trainingType: Swift.String, trainingTypeUUID: Swift.String, configurationUUID: Swift.String, channel: Swift.String, duration: Swift.Int, capacity: Swift.Int, classDelay: Swift.Int, dataOrder: Swift.String, useSteps: Swift.Int, typeSteps: Swift.String?, waitingTimeRemaining: Swift.Int = 0)
}
extension RookMotionWatchLink.RWStorageManager {
  public func storeUserInfo(user: RookMotionWatchLink.RMUser) throws
  public func deleteUserInfo()
  public func readUserInfo() -> RookMotionWatchLink.RMUser?
  public func getUserUUID() -> Swift.String?
  public func getUserToken() -> Swift.String?
  public func getUserPseudonym() -> Swift.String?
}
extension RookMotionWatchLink.RoundingPrecision : Swift.Equatable {}
extension RookMotionWatchLink.RoundingPrecision : Swift.Hashable {}
extension RookMotionWatchLink.RWTrainingInfo.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.RWTrainingInfo.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.RWTrainingInfo.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.AddUserToRoomResponse.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.AddUserToRoomResponse.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.AddUserToRoomResponse.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.TrainingType.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.TrainingType.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.TrainingType.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.UseStepsResponse.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.UseStepsResponse.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.UseStepsResponse.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.NetworkError : Swift.Equatable {}
extension RookMotionWatchLink.NetworkError : Swift.Hashable {}
extension RookMotionWatchLink.NetworkError : Swift.RawRepresentable {}
extension RookMotionWatchLink.NetworkResponse : Swift.Equatable {}
extension RookMotionWatchLink.NetworkResponse : Swift.Hashable {}
extension RookMotionWatchLink.NetworkResponse : Swift.RawRepresentable {}
extension RookMotionWatchLink.RWTrainingStoragedRecords.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.RWTrainingStoragedRecords.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.RWTrainingStoragedRecords.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.MetaResponse.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.MetaResponse.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.MetaResponse.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.WorkoutState : Swift.Equatable {}
extension RookMotionWatchLink.WorkoutState : Swift.Hashable {}
extension RookMotionWatchLink.TypeMessage : Swift.Equatable {}
extension RookMotionWatchLink.TypeMessage : Swift.Hashable {}
extension RookMotionWatchLink.TypeMessage : Swift.RawRepresentable {}
extension RookMotionWatchLink.WatchMessage.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.WatchMessage.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.WatchMessage.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.RWHeartRateDataRecords.CodingKeys : Swift.Equatable {}
extension RookMotionWatchLink.RWHeartRateDataRecords.CodingKeys : Swift.Hashable {}
extension RookMotionWatchLink.RWHeartRateDataRecords.CodingKeys : Swift.RawRepresentable {}
extension RookMotionWatchLink.HTTPMethod : Swift.Equatable {}
extension RookMotionWatchLink.HTTPMethod : Swift.Hashable {}
extension RookMotionWatchLink.HTTPMethod : Swift.RawRepresentable {}
